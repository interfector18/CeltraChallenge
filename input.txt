!!CB!! 29
Form Window: frmBerechnung
	Class: cBerechnung
	Property Template:
	Class DLL Name:
	Title: Tarifberechnung
	Icon File:
  
	Functions
		! !! bedeutet, diese Funktion ist fertig
		Function: _ImportVar
			Description: .._ImportVar(  )
					Importiert die Variablen
					2007-07-12 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				Boolean: bSparte
			Actions
				Call cBerechnung._ImportVar(  )
		! Ausdrucke aufrufen
		Function: _OnClickDeckungsvorgabe
			Description: .._OnClickDeckungsvorgabe()
					Ruft den Report Deckungsvorgabe auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
					2007-07-12 BG: einzelne Funktionen zur Berechnung durch OnClickNetto ersetzt (sind dieselben Funktionen)
					2009-07-17 BG: FIX: #3128: Zahlungsart aus Berechnung nehmen
			Returns
			Parameters
			Static Variables
			Local variables
				: oDeckungsvorgabe
					Class: cPrintDV
			Actions
				Call SalWaitCursor (TRUE)
				If m_bZahlenvergleich = TRUE
					Call OnClickNetto(  )
					! Call SalWaitCursor( TRUE )
					! Call GetNetto ()
					! Call GetBrutto ()
					! Call tblOutput.SetCursorToTop ()
					! Set bBerechnet = TRUE
					! Call SalWaitCursor( FALSE )
				Call SalTblReset( tblPrint )
				Call SalTblDestroyColumns (tblPrint)
				Call oDeckungsvorgabe.Init(tblPrint,RPT_DV)
				Set oDeckungsvorgabe.sZahlungsart_dat = dfsZahlungsart
				Call oDeckungsvorgabe.Fill(tblPrint,Global.tblSaveEingabe)
				Call SalWaitCursor (FALSE)
		Function: _OnClickZahlenvergleich
			Description: .._OnClickZahlenvergleich()
					Ruft den Report Zahlenvergleich auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				: oZahlenvergleich
					Class: cPrintZV
			Actions
				Call SalWaitCursor (TRUE)
				Call SalTblReset( tblPrint )
				Call SalTblDestroyColumns (tblPrint)
				Call oZahlenvergleich.Init(tblPrint, RPT_ZV)
				Set oZahlenvergleich.sZahlungsart_dat = dfsZahlungsart
				! Call oZahlenvergleich.Fill(tblPrint, tblOutput,frmBerechnung)
				Call oZahlenvergleich.Fill(tblPrint, tblOutput, m_bMitVUName )
				Call SalWaitCursor (FALSE)
		Function: _OnClickVergleich
			Description: .._OnClickVergleich()
					Ruft den Report Vergleich auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				: oVergleich
					Class: cPrintV
			Actions
				Call SalWaitCursor (TRUE)
				Call SalTblReset( tblPrint )
				Call SalTblDestroyColumns (tblPrint)
				Call oVergleich.Init(tblPrint, RPT_V)
				Set oVergleich.sZahlungsart_dat = dfsZahlungsart
				Call oVergleich.Fill(tblPrint, tblOutput,Global.tblBerechnung,frmBerechnung, m_bMitVUName )
				Call SalWaitCursor (FALSE)
		Function: _OnClickVergleichkurz
			Description: .._OnClickVergleichkurz()
					Ruft den Report Vergleichkurz auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				: oVergleich
					Class: cPrintV
			Actions
				Call SalWaitCursor (TRUE)
				Call SalTblReset( tblPrint )
				Call SalTblDestroyColumns (tblPrint)
				Call oVergleich.Init(tblPrint, RPT_VK)
				Set oVergleich.sZahlungsart_dat = dfsZahlungsart
				Call oVergleich.Fill(tblPrint, tblOutput,Global.tblBerechnung,frmBerechnung, m_bMitVUName )
				Call SalWaitCursor (FALSE)
		Function: _OnClickDeckungsumfang
			Description: .._OnClickDeckungsumfang()
					Ruft den Report Deckungsumfang auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				: oDeckungsumfang
					Class: cPrintDU
			Actions
				Call SalWaitCursor (TRUE)
				Call SalTblReset( tblPrint )
				Call SalTblDestroyColumns (tblPrint)
				Call oDeckungsumfang.Init(tblPrint, RPT_DU)
				Call oDeckungsumfang.Fill(tblPrint, tblOutput)
				Call SalWaitCursor (FALSE)
		Function: _OnClickBerechnung
			Description: .._OnClickBerechnung()
					Ruft den Report Berechnung auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				: oBerechnung
					Class: cPrintB
			Actions
				Call SalWaitCursor (TRUE)
				Call SalTblReset( tblPrint )
				Call SalTblDestroyColumns (tblPrint)
				Call oBerechnung.Init(tblPrint,RPT_B)
				Set oBerechnung.sZahlungsart_dat = dfsZahlungsart
				! Call oBerechnung.Fill(tblPrint,Global.tblSaveEingabe,tblOutput,Global.tblBerechnung,frmBerechnung)
				Call oBerechnung.Fill(tblPrint,Global.tblSaveEingabe,tblOutput,Global.tblBerechnung)
				Call SalWaitCursor (FALSE)
		Function: _OnClickRabatte
			Description: .._OnClickRabatte()
					Ruft die Rabatte-Maske auf
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
			Actions
				If SalModalDialog( dlgRabattInfo,  hWndForm,   tblOutput.colsVGBez, tblOutput.colsPGBez,
							tblOutput.colnVSPProduktnr1, tblOutput.colsProdBez )
					Call SalWaitCursor( TRUE )
					Call Global.tblBerechnung.BerechneBrutto(  )
					! Call VisWaitCursor (FALSE)
					Call SetOutput(  )
					Call SalWaitCursor( FALSE )
		Function: _GetNetto
			Description: .._GetNetto(  )
					Führt die Nettoberechnung der einzelnen Produkte durch
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
			Actions
				Call SalTblReset( Global.tblBerechnung )
				Call Global.tblBerechnung.SetNetto ( )
		Function: _GetBrutto
			Description: .._GetBrutto(  )
					Führt die Bruttoberechnung der einzelnen Produkte durch
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Umstellung auf Late-Bound
			Returns
			Parameters
			Static Variables
			Local variables
				Number: nBuendel
				Boolean: bJump
			Actions
				Set bJump = TRUE
				! If m_bEH = TRUE and m_bHH = TRUE
					Set nBuendel = 1
				! Else
					Set nBuendel = 0
				Set nBuendel = 0
				If bJump
					Call Global.tblBerechnung.SetBrutto (nBuendel, m_sZahlungsweise)
				Set bJump = TRUE
				If bJump
					Call Global.tblBerechnung.BerechneBrutto ()
				Call SetOutput(  )
		Function: SetOutput
			Description: es werden die Daten aus der tblBerechnung entsprechend der tblProduktkombinationen
					gesammelt und die Daten werden in tblOutput angezeigt
			Returns
			Parameters
			Static Variables
			Local variables
				Number: nRow
				Number: nRowProdukte
				String: sVGBez
				String: sVGBezkurz
				String: sPGBez
				String: sSBgen
				String: sProduktbez
				Boolean: bSonderRabatt
				Number: nVspproduktnr1
				Number: nVS1
				Number: nVSHG
				Number: nVSNG
				Number: nSBehalt1
				Number: nErgebnisJahr1
				Number: nErgebnisHalb1
				Number: nErgebnisViertel1
				Number: nErgebnisMonat1
				Number: nVspproduktnr2
				Number: nVS2
				Number: nSBehalt2
				Number: nErgebnisJahr2
				Number: nErgebnisHalb2
				Number: nErgebnisViertel2
				Number: nErgebnisMonat2
				Number: nLaufzeit
				Boolean: bSonder
				Boolean: bAdd
				Boolean: bAdd_Save
				Boolean: bEintrag
				Boolean: bEintrag1
				Boolean: bEintrag2
				Number: nFetch
				Boolean: bMindestpraemie1
				Boolean: bMindestpraemie2
			Actions
				Call SalTblReset( tblOutput )
				Set nRowProdukte = 0
				Set bAdd = FALSE
				If rbSortJahr = TRUE
					Set dfsZahlungsart = 'JÄHRLICH'
				Else If rbSortHalb = TRUE
					Set dfsZahlungsart = 'HALBJÄHRLICH'
				Else If rbSortViertel = TRUE
					Set dfsZahlungsart = 'VIERTELJÄHRLICH'
				Else If rbSortMonat = TRUE
					Set dfsZahlungsart = 'MONATLICH'
				Loop Produkte
					If not SalTblSetContext (Global.tblProduktkombinationen, nRowProdukte)
						Break Produkte
					Set bSonderRabatt = FALSE
					Set bEintrag = TRUE
					! SPARTE 1
					Set bEintrag1 = FALSE
					If Global.tblProduktkombinationen.VSPPRODUKTNR1 > 0
						Set nRow = 0
						Loop SP1
							If not SalTblSetContext( Global.tblBerechnung, nRow )
								Break
							If Global.tblProduktkombinationen.VSPPRODUKTNR1 = Global.tblBerechnung.colnVspproduktnr
								Set sVGBez = Global.tblBerechnung.colsVGBez
								Set sVGBezkurz = Global.tblBerechnung.colsVGBezkurz
								Set sProduktbez = Global.tblBerechnung.colsProduktBez
								! 44 ist die Bedingungnr von Versicherungssumme
								Call GetVS(Global.tblBerechnung.colnVspproduktnr, 44, nVS1)
								Set sPGBez = Global.tblBerechnung.colsPgbez
								Call SetOutput_Sparten (nRow, nRowProdukte, nVspproduktnr1,
										nErgebnisJahr1, nErgebnisHalb1, nErgebnisViertel1, nErgebnisMonat1,
										nSBehalt1, nLaufzeit, bSonder, bAdd, bMindestpraemie1 )
								Set bEintrag1 = TRUE
								Break SP1
							Set nRow = nRow + 1
					If bSonderRabatt != TRUE
						Set bSonderRabatt = bSonder
					If bAdd = TRUE
						Set bAdd_Save = bAdd
					If bSonderRabatt != TRUE
						Set bSonderRabatt = bSonder
					If bAdd = TRUE
						Set bAdd_Save = bAdd
					If Global.tblProduktkombinationen.VSPPRODUKTNR1 > 0 and bEintrag1 = FALSE
						Set bEintrag = FALSE
					Else
						Set bEintrag = TRUE
					If Global.tblProduktkombinationen.VSPPRODUKTNR2 > 0 and bEintrag2 = FALSE
						Set bEintrag = FALSE
					Else
						Set bEintrag = TRUE
					! Füge Zeile mit allen Sparten hinzu
					If bAdd = TRUE and bEintrag = TRUE and (bMindestpraemie1 = TRUE or bMindestpraemie2 = TRUE)
						Call tblOutput.Add (sVGBez, sVGBezkurz, sPGBez, sProduktbez, bSonderRabatt, nLaufzeit,
								nVspproduktnr1, nVS1, nVSHG, nVSNG, nSBehalt1, nErgebnisJahr1, nErgebnisHalb1, nErgebnisViertel1, nErgebnisMonat1,
								COLOR_Blue)
						Set bAdd = FALSE
						Set bEintrag = FALSE
					Else If bAdd = TRUE and bEintrag = TRUE
						Call tblOutput.Add (sVGBez, sVGBezkurz, sPGBez, sProduktbez, bSonderRabatt, nLaufzeit,
								nVspproduktnr1, nVS1, nVSHG, nVSNG, nSBehalt1, nErgebnisJahr1, nErgebnisHalb1, nErgebnisViertel1, nErgebnisMonat1,
								COLOR_Black)
						Set bAdd = FALSE
						Set bEintrag = FALSE
					Set nRowProdukte = nRowProdukte + 1
				! Setze die Sicht des Fensters
				Call SetView ()
		Function: SetOutput_Sparten
			Description: Summiert die Daten  aus der tblBerechne und schreibt die Daten in tbl Output
			Returns
			Parameters
				Number: nRow
				Number: nRowProdukte
				Receive Number: nVspproduktnr
				Receive Number: nErgebnisJahr
				Receive Number: nErgebnisHalb
				Receive Number: nErgebnisViertel
				Receive Number: nErgebnisMonat
				Receive Number: nSB
				Receive Number: nLaufzeit
				Receive Boolean: bSonderRabatt
				Receive Boolean: bAdd
				Receive Boolean: bMindestpraemie
			Static Variables
			Local variables
				Number: nFetch
				Number: nInklVertr
			Actions
				Set bAdd = FALSE
				Set bMindestpraemie = FALSE
				Loop
					If not SalTblFindNextRow( Global.tblBerechnung, nRow, 0, 0 )
						Break
					Call SalTblSetContext (Global.tblBerechnung, nRow)
					! *** Wenn Rabatte/Zuschläge eingegeben werden, ist das Flag TRUE;
							bSonderrabatt wird als Parameter an tblOutput.Add weitergegeben
					If SalTblQueryRowFlags(Global.tblBerechnung,nRow,ROW_UnusedFlag1)
						Set bSonderRabatt=TRUE
					Else
						Set bSonderRabatt=FALSE
					If Global.tblBerechnung.colnProblemanzeige > 0 and bMindestpraemie = FALSE
						Set bMindestpraemie = TRUE
					! ***
					If Global.tblBerechnung.colsArtRabatt = RAB_Brutto
						Call SqlPrepareAndExecute (hSql1,
								'SELECT selbstbehalt, laufzeit FROM vspprodukt WHERE  vspproduktnr = :Global.tblBerechnung.colnVspproduktnr
								 INTO	:nSB, :nLaufzeit')
						Call SqlFetchNext (hSql1,nFetch)
						Call SqlCommit (hSql1)
						Set nVspproduktnr = Global.tblBerechnung.colnVspproduktnr
						Set nErgebnisJahr = Global.tblBerechnung.colnErgebnis
						Set nErgebnisHalb = Global.tblBerechnung.colnErgebnisHalb / 2
						Set nErgebnisViertel = Global.tblBerechnung.colnErgebnisViertel / 4
						Set nErgebnisMonat = Global.tblBerechnung.colnErgebnisMonat / 12
						Set bAdd = TRUE
						Break
		Function: _XferGlobal2Output
			Description: .._XferGlobal2Output()
					Transferiert Werte Global nach tblOutput
					XXXX-XX-XX XX: Erstellung
					2007-08-28 BG: Umstellung auf late-bound
			Returns
			Parameters
			Static Variables
			Local variables
				Window Handle: hWnd
				Number: nRow
			Actions
				Call SetOutput()
				Call SalWaitCursor( TRUE )
				Call SetView ()
				If Global.bLoaded
					Call tblOutput.RestoreSelections (m_sOutputSel)
				If SalTblAnyRows (tblOutput,ROW_Selected,0) and Global.bLoaded = FALSE
					Set nRow = TBL_MinRow
					Set m_sOutputSel = ''
					Loop
						If SalTblFindNextRow( tblOutput, nRow, ROW_Selected, 0 )
							Call SalTblSetRowFlags( tblOutput, nRow, ROW_Selected, FALSE )
							! Call SalMessageBox( 'es ist etwas selektiert', 'TEST', MB_Ok )
							Set nRow = nRow + 1
						Else
							Break
				Call SalTblScroll(tblOutput,0,hWndNULL,TBL_ScrollTop)
				Call SalWaitCursor(FALSE )
		Function: GetVS
			Description:
			Returns
				Number:
			Parameters
				Number: p_nVspproduktnr
				Number: p_nBedingungnr
				Receive Number: r_nWert
			Static Variables
			Local variables
				String: sSQL
				Number: nFetch
				String: sListe
				String: sWert
			Actions
				Call GetProduktpaketliste (p_nVspproduktnr, sListe)
				If p_nVspproduktnr > 0 and sListe != STRING_Null
					Set sSQL = 'SELECT pd.wert FROM bedingung b, produktdu pd, produktpaket pp, vspprodukt vsp 
							WHERE bedingungnr = :p_nBedingungnr
							AND b.deckungsumfangnr = pd.deckungsumfangnr
							AND pd.produktpaketnr = pp.produktpaketnr 
							AND pp.produktnr = vsp.produktnr
							AND vsp.vspproduktnr = :p_nVspproduktnr
							AND pp.produktpaketnr in (' || sListe || ')
							INTO :sWert
							'
					Call SqlPrepareAndExecute( hSql2, sSQL )
					If SqlFetchNext( hSql2, nFetch )
						Call SqlCommit( hSql2 )
						If sWert = '1' or sWert = '2'
							Set r_nWert = NUMBER_Null
						Else
							Set r_nWert = SalStrToNumber( sWert )
						Return TRUE
					Else
						Call SqlCommit( hSql2 )
						Return FALSE
				Else
					Return FALSE
		Function: GetProduktpaketliste
			Description:
			Returns
			Parameters
				Number: p_nVspproduktnr
				Receive String: r_sListe
			Static Variables
			Local variables
			Actions
				If p_nVspproduktnr > 0
					Call GetListe (p_nVspproduktnr, r_sListe, Global.tblVSPProdukte)
				Else
					Set r_sListe = ''
				! If p_nVspproduktnr2 > 0
					Call GetListe (p_nVspproduktnr2, r_sListe2, Global.tblVSPProdukte)
				! Else
					Set r_sListe2 = ''
		Function: GetListe
			Description:
			Returns
			Parameters
				Number: p_nVspproduktnr
				Receive String: r_sListe
				Window Handle: hTable
			Static Variables
			Local variables
				Number: nRow
			Actions
				Set nRow = -1
				Set nRow = VisTblFindNumber (hTable,0,hTable.VSPProduktnr,p_nVspproduktnr)
				Call SalTblSetContext( hTable, nRow )
				Set r_sListe = hTable.Produktpakete
		! Function: _ShowColumns
			Description: .._ShowColumns( )
					Zeigt/Versteckt die Columns nach den Checkboxen
					200X-XX-XX XX: Erstellung
					2007-07-11 BG: Late-bound-Umstellung
					2007-08-28 BG: Aus tblOutput herausgenommen, weil unter Vista Fehler auftreten
			Returns 
			Parameters 
			Static Variables 
			Local variables 
				: oDebug
.winattr class
					Class: cDebug
.end
			Actions 
				Call cBerechnung._ShowColumns( )
	Window Parameters
	Window Variables
		! Ausdrucke - vorerst auskommentieren, bis EH-Ausdrucke gemacht werden
		File Handle: m_hFile
		Boolean: m_bMitVUName
	Message Actions
		! On NAV_EnableDU
			Return TRUE
